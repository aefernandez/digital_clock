/* Digital Alarm Clock by Alan Fernandez
   Using Time and DS1307RTC libraries.
   Version 1.5 (Improving Readability, Bugs, Documentation) - 12/6/15 8:33:00PM UTC -5:00

   Remarks:
    Working:
      Time Setting
      Date Setting
      Buzz on click [?] (Need to install buzzer to verify)
    Not Working:
      Alarm Setting: Minutes and seconds won't update until MODE is repeatedly pressed
                     Digits do not blink making navigation hard
      Button navigation is glitchy

    Fixed:
      [1.2] Back to display time -> Nothing shows up
      [1.2] Setting time or date -> Nothing shows up (Was checking for buttons to be LOW instead of HIGH)
      [1.3] Time Setting: Digits do not blink making navigation hard & this function lags, hours place holder shows up after minutes and seconds
      [1.3] Implemented const int BUTTON_DEBOUNCE to standardize debouncing time
      [1.4] Designed blink function that can be utilized both for time setting and date setting. Makes use of pointers. Streamlined code for timeSetting.
      [1.4] Back to Main display shows garbled junk: Fixed itself with the streamlining.
      [1.4] Implemented blinking function to dateChange(). The function works beautifully :)
      [1.5] Improved readability by changing if statement ladders for switch cases
      [1.5] blinkChar(): When the number is above 10 it blinks one more space to the right than it should.
      [1.5] Finished blinking function and implementation.
      [1.5] Setting Date: Clears the screen intead of just the digit being adjusted when looping around (ie 0 to 31)
      [1.5] Optimized displayTime() function using the printDigits() function.
      {1.5] Added comments describing parameter function and function description.

    To Be Implemented:
      Pillow Sensor
      Automatic Brightness adjust with PWM + LD
      Make the date be changed once a day instead of every second
*/
#include <Wire.h>
//#include <EEPROM.h>
#include <TimeAlarms.h>
#include <DS1307RTC.h>
#include <Time.h>
#include <LiquidCrystal.h>
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

/*Pin configuration */
#define decreaseBtn 7
#define increaseBtn 8
#define modeBtn 9
#define setBtn 10
#define buzzer 13

int HOUR, MINUTE, SECOND;
int tempVar = 0;

int clockSet = 0;
int alarmSet = 1;

const int BUTTON_DEBOUNCE = 200; //200ms delay after button press to debounce

unsigned long startDate = 1416614400; //Time between Jan 1, 1970 and Nov 22, 2014.
bool showingDate = false;

unsigned long timeUpdated = millis();
unsigned long dateUpdated = -60000;
const char *menuItems[] = {"Set Time?", "Set Date?", "Set Alarm?"};

/*Blink Function variables and settings */
const int POSITION_ARRAY[] = {0, 3, 6, 0, 3, 6}; //Position of the first character of each pair on the LCD for dd/mm/yyyy and hh:mm:ss
const char SELECTED_ARRAY[] = {'D', 'M', 'Y', 'h', 'm', 's'}; //Case is important to avoid confusion between minute and MONTH. Array holds posible selected pair.
const int BLINK_ARRAY_LENGTH = 6; //Array length is necessary to avoid running off the edge of the array

time_t t = now();

void setup() {
  Wire.begin();
  lcd.begin(16, 2);
  Serial.begin(9600);

  lcd.setCursor(0, 1);
  lcd.print("    Hi Sabs!    ");
  setSyncProvider(RTC.get); //When syncing, get the time from the RTC
  setSyncInterval(10); //Time will be synced with the RTC every n seconds
  delay(1000);
  
  pinMode(modeBtn, INPUT);
  pinMode(setBtn, INPUT);
  pinMode(increaseBtn, INPUT);
  pinMode(decreaseBtn, INPUT);
  pinMode(buzzer, OUTPUT);

  /*f(!RTC.begin()){
      lcd.setCursor(5,0);
      lcd.print("ERROR!");
      lcd.setCursor(0,1);
      lcd.print("RTC NOT FOUND");
      while(1);
    }

    if(!RTC.isrunning()){
    RTC.adjust(DateTime(F(__DATE__),F(__TIME__)));
    }

  */
}

/**Main loop */
void loop() {
  //Check if the modeBtn has been pressed
  if (digitalRead(modeBtn) != LOW) {    //setBtn Alarm time
    beep();
    lcd.clear();
    menu();
    beep();
    beep();
  }

  //Update the time every second
  if (millis() - timeUpdated > 1000) {
    displayTime();
    displayDate(t, false);
    showingDate = false;
  } else {                            //What the hell is this for??
    displayDate(t, true);
    t = now();
    timeUpdated = millis();
    displayTime();
    Alarm.delay(0);
  }

  if (millis() - dateUpdated > 60000) {
    t = now();
    dateUpdated = millis();
    if (showingDate) {
      showingDate = true;
    }
  }

  //If sync fails display error on the right end of the first row
  if (timeStatus() != timeSet) {
    timeSyncFail();
  }
}

/*Main menu of the clock */
void menu() {
  int selectedItem = 0;
  lcd.clear();
  lcd.print(menuItems[selectedItem]);
  delay(BUTTON_DEBOUNCE);

  while (selectedItem < 3) { //Once the user loops through all the items, go back to the main menu
    lcd.setCursor(9, 0);

    if (digitalRead(modeBtn) == HIGH && selectedItem != 3) {
      beep();
      selectedItem++;
      lcd.clear();
      lcd.print(menuItems[selectedItem]);
      delay(BUTTON_DEBOUNCE);
    } else if (digitalRead(modeBtn) == HIGH && selectedItem == 3) {
      beep();
      delay(BUTTON_DEBOUNCE);
    }

    if (digitalRead(setBtn) == HIGH) {
      beep();
      switch (selectedItem){
       case 0:
        changeTime(clockSet);
        break;//Quit the while loop and return back to the main screen
       case 1:
        changeDate();
        break;//Quit the while loop and return back to the main screen
       case 2:
        changeTime(alarmSet);
        break;
      }
    }
  }
  displayTime();
  displayDate(t, false);
  timeUpdated = millis();
}

/**Specifies what to do when the Time library fails to sync with the RTC */
void timeSyncFail() {
  while (timeStatus() != timeSet) {
    Serial.print("case 6,1");
    if (millis() - timeUpdated > 1000) {
      Serial.print("case 6,2");
      t = now();
      timeUpdated = millis();
      displayTime();
      Alarm.delay(0);
      lcd.setCursor(12, 0);
      lcd.print("!RTC"); //Display error msg on the far right of the first row
    }

    if (millis() - dateUpdated > 60000) {
      Serial.print("case 6,3");
      t = now();
      dateUpdated = millis();
      if (showingDate) {
        Serial.print("case 6,4");
        displayDate(t, false);
        showingDate = false;
      } else {
        Serial.print("case 6,5");
        displayDate(t, true);
        showingDate = true;
      }
    }
  }
  Serial.print("case 6,6");
  lcd.clear();
}

void dailyAlarm() { //Alarm was triggered
  int triggerTime = minute(); //When the alarm was triggered
  lcd.setCursor(14, 0);
  lcd.print("A");//Indicate that the alarm has been triggered
  while (minute() - triggerTime < 5) { //Check if the pillow sensor is triggered for 5 minutes
    if (millis() - timeUpdated > 1000) { //Update the time on screen as usual
      t = now();
      timeUpdated = millis();
      displayDate(t, true);
      displayTime();
    }

    //     if(digitalRead(pillowSensor)==0){
    //      lcd.setCursor(0,1);
    //
    //      lcd.print("IT WORKS! HAHAHA");
    //      alarmBeep();
    //      delay(BUTTON_DEBOUNCE);
    //     }
  }
  lcd.clear();
}

//*************************************************************************************************************************************************
//*********************************************************Time and Date Change Functions**********************************************************
//*************************************************************************************************************************************************

/**Allows the user to change the time.
 * @param MODE Specifies if the function is being used to change the time for the clock or the time for the alarm.
 */
void changeTime(int MODE) {
  int hours = 1, minutes = 0, seconds = 0; //Temporary storage for the desired time

  unsigned long lastBlink = millis();
  bool blinkBlank = false;
  char selected = 'h';//What to adjust
  int* updateArray[] = {NULL, NULL, NULL, &hours, &minutes, &seconds};

  delay(BUTTON_DEBOUNCE);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Setting Time");
  lcd.setCursor(0, 1);
  lcd.print("01:00:00");

  while (digitalRead(setBtn) == LOW) { //Setting time will quit once the user presses the set button

    /*Blinking the selected setting*/
    if (millis() - lastBlink >= 500) {
      lastBlink = blinkChar(blinkBlank, selected, updateArray);
      blinkBlank = !blinkBlank;
      Serial.println(String(hours) + String(" ") + String(minutes) + String(" ") + String(seconds));
    }

    /*Reacting to user button presses */
    if (digitalRead(increaseBtn) == HIGH) {
      switch (selected) {
        case 'h':
          if (hours == 24) { //Loop back to one
            hours = 1;
          } else {
            (hours)++;
          }
          break;
        case 'm':
          if (minutes == 59) { //Loop back to zero
            minutes = 0;
          } else {
            (minutes)++;
          }
          break;
        case 's':
          if (seconds == 59) { //Loop back to zero
            seconds = 0;
          } else {
            seconds++;
          }
          break;
      }
      delay(BUTTON_DEBOUNCE);
    }

    if (digitalRead(decreaseBtn) == HIGH) {
      switch (selected) {
        case 'h':
          if (hours == 1) { //Loop to 24
            hours = 24;
          } else {
            (hours)--;
          }
          break;
        case 'm':
          if (minutes == 0) { //Loop to 59
            minutes = 59;
          } else {
            (minutes)--;
          }
          break;
        case 's':
          if (seconds == 0) { //Loop to 59
            seconds = 59;
          } else {
            seconds--;
          }
          break;
      }
      delay(BUTTON_DEBOUNCE);
    }

    if (digitalRead(modeBtn) == HIGH) {
      beep();
      switch (selected) {
        case 'h':
          printDigits(hours, 0, 1);
          selected = 'm';
          break;
        case 'm':
          printDigits(minutes, 3, 1);
          selected = 's';
          break;
        case 's':
          printDigits(seconds, 6, 1);
          selected = 'h';
          break;
      }
      delay(BUTTON_DEBOUNCE);
    }

    /*If the function is being used to change the time of the clock then do this, else it is being used to change the alarm time, do that. */
    if (MODE == clockSet) { //Changing the clock time
      lcd.setCursor(0, 0);
      lcd.print("Setting Time");
      setTime( hours,  minutes,  seconds, day(), month(), year()); //adjust local time
      t = now(); //convert time to time_t form
      RTC.set(t); //adjust time in the RTC
      //delay(1000);
    } else if (MODE == alarmSet) { //Changing the alarm time
      lcd.setCursor(0, 0);
      lcd.print("Setting Alarm");
      Alarm.alarmRepeat( hours,  minutes,  seconds, dailyAlarm);
      //delay(1000);
    }
  }
  delay(BUTTON_DEBOUNCE);
  lcd.clear();
}

/**Allows the user to change the date.*/
void changeDate() {
  int years = 2016, months = 1, days = 1;
  char selected = 'D';//Start by modifying the day
  int* updateArray[] = {&days, &months, &years, NULL, NULL, NULL};
  unsigned long lastBlink = millis();
  bool blinkBlank = false;

  delay(BUTTON_DEBOUNCE);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Setting Date");
  lcd.setCursor(0, 1);
  lcd.print("01/01/2016");
  while (digitalRead(setBtn) == LOW) { //Set the date and quit back to menu when the set button is pressed

    /*Blinking the selected setting*/
    if (millis() - lastBlink >= 500) {
      lastBlink = blinkChar(blinkBlank, selected, updateArray);
      blinkBlank = !blinkBlank;
    }
    /*Reacting to button presses */
    if (digitalRead(increaseBtn) == HIGH) {
      switch (selected) {
        case 'D':
          if (days == 31) {
            days = 1;
          } else {
            days++;
          }
          break;
        case 'M':
          if (months == 12) {
            months = 1;
          } else {
            months++;
          }
          break;
        case 'Y':
          if (years == 2050) {
            years = 2016;
          } else {
            years++;
          }
          break;
      }
      delay(BUTTON_DEBOUNCE);
    }

    if (digitalRead(decreaseBtn) == HIGH) {
      switch (selected) {
        case 'D':
          if (days == 1) {
            days = 31;
          } else {
            days--;
          }
          break;
        case 'M':
          if (months == 1) {
            months = 12;
          } else {
            months--;
          }
          break;
        case 'Y':
          if (years == 2016) {
            years = 2050;
          } else {
            years--;
          }
          break;
      }
      delay(BUTTON_DEBOUNCE);
    }

    if (digitalRead(modeBtn) == HIGH) {
      beep();
      switch (selected) {
        case 'D':
          printDigits(days, 0, 1);
          selected = 'M';
          break;
        case 'M':
          printDigits(months, 3, 1);
          selected = 'Y';
          break;
        case 'Y':
          printDigits(years, 6, 1);
          selected = 'D';
          break;
      }
      delay(BUTTON_DEBOUNCE);
    }

  }
  setTime(hour(), minute(), second(), days, months, years); //adjust local date
  t = now(); //convert time to time_t form
  RTC.set(t); //adjust time in the RTC
  lcd.clear();
  delay(BUTTON_DEBOUNCE);
}

//*************************************************************************************************************************************************
////**************************************************************Display Functions****************************************************************
//*************************************************************************************************************************************************

/**Prints the time to the screen. */
void displayTime() {
  printDigits(hourFormat12(), 0, 0);

  lcd.print(":");
  printDigits(minute(), 3, 0);

  lcd.print(":");
  printDigits(second(), 6, 0);

  lcd.setCursor(9, 0);
  if (isAM()) {
    lcd.print("AM");
  } else {
    lcd.print("PM");
  }
}

/**Function to display the current date.
 * @param showDate Boolean to indicate whether the current date is shown or the number of days since Sabrina and I got together.
 * @param t Current time given by the Time library
 */
void displayDate(time_t t, bool showDate) {
  if (showDate == true) {
    lcd.setCursor(0, 1);
    lcd.print(dayShortStr(weekday(t)));
    lcd.print(" ");
    lcd.print(monthShortStr(month(t)));
    lcd.print(" ");
    lcd.print(day(t));
    lcd.print(", ");
    lcd.print(year(t));
  } else {
    lcd.setCursor(0, 1);
    lcd.print((t - startDate) / 86400); //Convert time between today and 22 Nov, 2015 to days. (Days we've been together)
    lcd.print(" Days");
  }
}

/**
 * 
 */
void defaultTime() {
  lcd.setCursor(0, 1);
  lcd.print(HOUR);
  lcd.print(":");
  lcd.print(MINUTE);
  lcd.print(":");
  lcd.print(SECOND);
}

//*************************************************************************************************************************************************
//************************************************************Haptic FeedBack Functions**************************************************************
//*************************************************************************************************************************************************

void beep() {
  tone(13, 300, 10);
}
void alarmBeep() {
  tone(13, 1480, 50);
}

/**This function blinks the specified pair of digits. It works by receiving the char that corresponds to the pair to blink: Hour = h, Year = Y
  *From there it uses the POSITION_ARRAY to determine where to start printing or erasing. It also calculates the number of spaces it has to erase in order 
  *to blink the pair. ie. For year it calculates offset=4 (2015 = 4 digits).
  *
   @param blinkBlank: Whether the characters are currently blank or not
   @param selected: Which character has been selected to blink. ie: Years, minutes, seconds.
   @param updateArray[]: An array containing the current updated values of all the possible characters that could blink. ie. updated hours, minutes, years.
   @var SELECTED_ARRAY[] This array contains all the possible selections for pairs: hour, min, sec, yr, etc... Corresponds to POSITION_ARRAY[]
   @var POSITION_ARRAY[] This array specifies the position on the LCD where the selected pair starts getting printed ie. Hour = 0, Min = 3, Sec = 6
*/
unsigned long blinkChar(bool blinkBlank, char selected, int *updateArray[]) {
  int pos; //Position of the first character that will blink
  int offset; //How many characters to the right should also blink
  int arrayPosition; //Holds the position in the array that corresponds to the selected character
  int chosenNumber;

  /*Determine the position in the LCD based on the reference array SELECTED_ARRAY that contains all the possibilites. */
  for (arrayPosition = 0; arrayPosition < BLINK_ARRAY_LENGTH; arrayPosition++) {
    if (SELECTED_ARRAY[arrayPosition] == selected && SELECTED_ARRAY[arrayPosition] != NULL) {
      pos = POSITION_ARRAY[arrayPosition];
      chosenNumber = *updateArray[arrayPosition];
    }
  }

  /*Calculates the number of digits to offset*/
  char snum[100];
  sprintf(snum, "%d", chosenNumber);
  offset = strlen(snum);

  /*Since a zero is printed in front of single digits, offset for <10 and >10 should be the same. Offset = 1. */
  if (chosenNumber >= 10) {
    offset--;
  }

  if (blinkBlank) {
    lcd.setCursor(pos, 1); //Sets the cursor to the character that must blink
    if (chosenNumber < 10) {
      lcd.print("0");
    }
    lcd.print(chosenNumber);
  } else {
    lcd.setCursor(pos, 1);
    for (int a = 0; a <= offset; a++) {
      lcd.print(" ");
    }
  }
  Serial.println(String(*updateArray[0]) + String(" ") + String(*updateArray[1]) + String(" ") + String(*updateArray[2]) + String(" ") + String(*updateArray[3]) + String(" ") + String(*updateArray[4]) + String(" ") + String(*updateArray[5]) + String(" POS:") + String(pos));
  Serial.println(String("CN:") + String(chosenNumber) + String(" OF") + String(offset) + String() + String() + String() + String() + String() + String());

  return millis();
}


/**This function formats and prints numbers to the LCD on the specified row and col. Formatting: Adds a zero in front if the number is less than 10 \
  @param numberToPrint The number that will be printed ie. Hours, Year, etc..
  @param col The column on the LCD
  @param row The row on the LCD 
*/
void printDigits(int numberToPrint, int col, int row) {
  lcd.setCursor(col, row);
  if (numberToPrint < 10) {
    lcd.print("0");
  }
  lcd.print(numberToPrint);
}
